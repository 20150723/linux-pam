.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "PAM" "8" "02/12/2006" "Linux\-PAM Manual" "Linux\-PAM Manual"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
pam \- Pluggable Authentication Modules for Linux
.SH "DESCRIPTION"
.PP
This manual is intended to offer a quick introduction to
\fILinux\-PAM\fR. For more information the reader is directed to the
\fILinux\-PAM system administrators' guide\fR.
.PP
\fILinux\-PAM\fR
Is a system of libraries that handle the authentication tasks of applications (services) on the system. The library provides a stable general interface (Application Programming Interface \- API) that privilege granting programs (such as
\fBlogin\fR(1)
and
\fBsu\fR(1)) defer to to perform standard authentication tasks.
.PP
The principal feature of the PAM approach is that the nature of the authentication is dynamically configurable. In other words, the system administrator is free to choose how individual service\-providing applications will authenticate users. This dynamic configuration is set by the contents of the single
\fILinux\-PAM\fR
configuration file
\fI/etc/pam.conf\fR. Alternatively, the configuration can be set by individual configuration files located in the
\fI/etc/pam.d/\fR
directory.
\fIThe presence of this directory will cause \fR\fILinux\-PAM\fR\fI to ignore\fR\fI/etc/pam.conf\fR.
.PP
From the point of view of the system administrator, for whom this manual is provided, it is not of primary importance to understand the internal behavior of the
\fILinux\-PAM\fR
library. The important point to recognize is that the configuration file(s)
\fIdefine\fR
the connection between applications
(\fIservices\fR) and the pluggable authentication modules
(\fIPAM\fRs) that perform the actual authentication tasks.
.PP
\fILinux\-PAM\fR
separates the tasks of
\fIauthentication\fR
into four independent management groups:
\fIaccount\fR
management;
\fIauth\fRentication management;
\fIpassword\fR
management; and
\fIsession\fR
management. (We highlight the abbreviations used for these groups in the configuration file.)
.PP
Simply put, these groups take care of different aspects of a typical user's request for a restricted service:
.PP
\fIaccount\fR
\- provide account verification types of service: has the user's password expired?; is this user permitted access to the requested service?
.PP
\fIauth\fRentication \- authenticate a user and set up user credentials. Typically this is via some challenge\-response request that the user must satisfy: if you are who you claim to be please enter your password. Not all authentications are of this type, there exist hardware based authentication schemes (such as the use of smart\-cards and biometric devices), with suitable modules, these may be substituted seamlessly for more standard approaches to authentication \- such is the flexibility of
\fILinux\-PAM\fR.
.PP
\fIpassword\fR
\- this group's responsibility is the task of updating authentication mechanisms. Typically, such services are strongly coupled to those of the
\fIauth\fR
group. Some authentication mechanisms lend themselves well to being updated with such a function. Standard UN*X password\-based access is the obvious example: please enter a replacement password.
.PP
\fIsession\fR
\- this group of tasks cover things that should be done prior to a service being given and after it is withdrawn. Such tasks include the maintenance of audit trails and the mounting of the user's home directory. The
\fIsession\fR
management group is important as it provides both an opening and closing hook for modules to affect the services available to a user.
.SH "THE CONFIGURATION FILE(S)"
.PP
When a
\fILinux\-PAM\fR
aware privilege granting application is started, it activates its attachment to the PAM\-API. This activation performs a number of tasks, the most important being the reading of the configuration file(s):
\fI/etc/pam.conf\fR. Alternatively, this may be the contents of the
\fI/etc/pam.d/\fR
directory.
.PP
These files list the
\fIPAM\fRs that will do the authentication tasks required by this service, and the appropriate behavior of the PAM\-API in the event that individual
\fIPAM\fRs fail.
.PP
The syntax of the
\fI/etc/pam.conf\fR
configuration file is as follows. The file is made up of a list of rules, each rule is typically placed on a single line, but may be extended with an escaped end of line: `\\<LF>'. Comments are preceded with `#' marks and extend to the next end of line.
.PP
The format of each rule is a space separated collection of tokens, the first three being case\-insensitive:
.PP
\fI service type control module\-path module\-arguments\fR
.PP
The syntax of files contained in the
\fI/etc/pam.d/\fR
directory, are identical except for the absence of any
\fIservice\fR
field. In this case, the
\fIservice\fR
is the name of the file in the
\fI/etc/pam.d/\fR
directory. This filename must be in lower case.
.PP
An important feature of
\fILinux\-PAM\fR, is that a number of rules may be
\fIstacked\fR
to combine the services of a number of PAMs for a given authentication task.
.PP
The
\fIservice\fR
is typically the familiar name of the corresponding application:
\fIlogin\fR
and
\fIsu\fR
are good examples. The
\fIservice\fR\-name,
\fIother\fR, is reserved for giving
\fIdefault\fR
rules. Only lines that mention the current service (or in the absence of such, the
\fIother\fR
entries) will be associated with the given service\-application.
.PP
The
\fItype\fR
is the management group that the rule corresponds to. It is used to specify which of the management groups the subsequent module is to be associated with. Valid entries are:
\fIaccount\fR;
\fIauth\fR;
\fIpassword\fR; and
\fIsession\fR. The meaning of each of these tokens was explained above.
.PP
The third field,
\fIcontrol\fR, indicates the behavior of the PAM\-API should the module fail to succeed in its authentication task. There are two types of syntax for this control field: the simple one has a single simple keyword; the more complicated one involves a square\-bracketed selection of
\fIvalue=action\fR
pairs.
.PP
For the simple (historical) syntax valid
\fIcontrol\fR
values are:
\fIrequisite\fR
\- failure of such a PAM results in the immediate termination of the authentication process;
\fIrequired\fR
\- failure of such a PAM will ultimately lead to the PAM\-API returning failure but only after the remaining
\fIstacked\fR
modules (for this
\fIservice\fR
and
\fItype\fR) have been invoked;
\fIsufficient\fR
\- success of such a module is enough to satisfy the authentication requirements of the stack of modules (if a prior
\fIrequired\fR
module has failed the success of this one is
\fIignored\fR);
\fIoptional\fR
\- the success or failure of this module is only important if it is the only module in the stack associated with this
\fIservice\fR+\fItype\fR.
.PP
New control directive first introduced in ALT Linux is
\fIinclude\fR
\- include all lines of given type from the configuration file specified as an argument to this control.
.PP
For the more complicated syntax valid
\fIcontrol\fR
values have the following form:
.PP
[value1=action1\fIvalue2=action2\fR...]
.PP
Where
\fIvalueN\fR
corresponds to the return code from the function invoked in the module for which the line is defined. It is selected from one of these:
\fIsuccess\fR;
\fIopen_err\fR;
\fIsymbol_err\fR;
\fIservice_err\fR;
\fIsystem_err\fR;
\fIbuf_err\fR;
\fIperm_denied\fR;
\fIauth_err\fR;
\fIcred_insufficient\fR;
\fIauthinfo_unavail\fR;
\fIuser_unknown\fR;
\fImaxtries\fR;
\fInew_authtok_reqd\fR;
\fIacct_expired\fR;
\fIsession_err\fR;
\fIcred_unavail\fR;
\fIcred_expired\fR;
\fIcred_err\fR;
\fIno_module_data\fR;
\fIconv_err\fR;
\fIauthtok_err\fR;
\fIauthtok_recover_err\fR;
\fIauthtok_lock_busy\fR;
\fIauthtok_disable_aging\fR;
\fItry_again\fR;
\fIignore\fR;
\fIabort\fR;
\fIauthtok_expired\fR;
\fImodule_unknown\fR;
\fIbad_item\fR; and
\fIdefault\fR. The last of these,
\fIdefault\fR, implies 'all
\fIvalueN\fR's not mentioned explicitly. Note, the full list of PAM errors is available in /usr/include/security/_pam_types.h . The
\fIactionN\fR
can be: an unsigned integer,
\fIJ\fR, signifying an action of 'jump over the next J modules in the stack'; or take one of the following forms:\fIignore\fR
\- when used with a stack of modules, the module's return status will not contribute to the return code the application obtains;\fIbad\fR
\- this action indicates that the return code should be thought of as indicative of the module failing. If this module is the first in the stack to fail, its status value will be used for that of the whole stack.\fIdie\fR
\- equivalent to bad with the side effect of terminating the module stack and PAM immediately returning to the application.\fIok\fR
\- this tells PAM that the administrator thinks this return code should contribute directly to the return code of the full stack of modules. In other words, if the former state of the stack would lead to a return of
\fIPAM_SUCCESS\fR, the module's return code will override this value. Note, if the former state of the stack holds some value that is indicative of a modules failure, this 'ok' value will not be used to override that value.\fIdone\fR
\- equivalent to ok with the side effect of terminating the module stack and PAM immediately returning to the application.\fIreset\fR
\- clear all memory of the state of the module stack and start again with the next stacked module.
.PP
\fImodule\-path\fR
\- this is either the full filename of the PAM to be used by the application (it begins with a '/'), or a relative pathname from the default module location:
\fI/lib/security/\fR.
.PP
\fImodule\-arguments\fR
\- these are a space separated list of tokens that can be used to modify the specific behavior of the given PAM. Such arguments will be documented for each individual module.
.SH "FILES"
.PP
\fI/etc/pam.conf\fR
\- the configuration file\fI/etc/pam.d/\fR
\- the
\fILinux\-PAM\fR
configuration directory. Generally, if this directory is present, the
\fI/etc/pam.conf\fR
file is ignored.\fI/lib/libpam.so.X\fR
\- the dynamic library\fI/lib/security/*.so\fR
\- the PAMs
.SH "ERRORS"
.PP
Typically errors generated by the
\fILinux\-PAM\fR
system of libraries, will be written to
\fBsyslog\fR(3).
.SH "CONFORMING TO"
.PP
DCE\-RFC 86.0, October 1995.Contains additional features, but remains backwardly compatible with this RFC.
.SH "BUGS"
.PP
None known.
.SH "SEE ALSO"
.PP
The three
\fILinux\-PAM\fR
Guides, for
\fIsystem administrators\fR,
\fImodule developers\fR, and
\fIapplication developers\fR.
